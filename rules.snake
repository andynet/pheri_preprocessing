rule download:
  output:
    expand('{{data_dir}}/001_{{database}}.{suffix}', suffix=SUFFIXES)
  params:
    script_dir=SCRIPT_DIR
  log:
    '{data_dir}/001_{database}.stdout',
    '{data_dir}/001_{database}.stderr'
  shell:
    '''
    mkdir -p {wildcards.data_dir}
    {params.script_dir}/001_download_from_{wildcards.database}.py {wildcards.data_dir} > {log[0]} 2> {log[1]}
    '''

rule merge:
  input:
    expand('{{data_dir}}/001_{database}.{suffix}', database=DATABASES, suffix=SUFFIXES)
  output:
    '{data_dir}/002_merged.genomes.conversion',
    '{data_dir}/002_merged.genomes.fasta'
  shell:
    '''
    cat {wildcards.data_dir}/001_*.genomes.conversion > {output[2]}
    cat {wildcards.data_dir}/001_*.genomes.fasta      > {output[3]}
    '''

rule eliminate_duplicates:
  input:
    '{data_dir}/002_merged.genomes.conversion',
    '{data_dir}/002_merged.genomes.fasta'
  output:
    '{data_dir}/003_deduplicated.genomes.conversion',
    '{data_dir}/003_deduplicated.genomes.fasta'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/003_deduplicate_genomes.py {input[1]} {input[0]} {wildcards.data_dir}
    '''

rule count_hosts:
  input:
    '{data_dir}/003_deduplicated.genomes.conversion'
  output:
    '{data_dir}/004_hosts.tsv',
    '{data_dir}/004_genera.tsv',
    '{data_dir}/004_genera.counts',
    '{data_dir}/004_genera_of_interest'
  params:
    script_dir=SCRIPT_DIR,

  shell:
    '''
    {params.script_dir}/004_get_hosts.py -i {input[0]}                                   \
                                         -o {output[0]}                                  \
                                         -d {params.script_dir}/004_taxonomies.json

    less {output[0]} | cut -f1,2 | sort | uniq > {output[1]}
    less {output[1]} | cut -f2 | sort | uniq -c | sort -nr > {output[2]}
    less {output[2]} | grep -v "None" | head -n 50 | tr -s " " | cut -f3 -d " " > {output[3]}
    '''

rule split_dataset:
  input:
    '{data_dir}/003_deduplicated.genomes.fasta',
    '{data_dir}/004_genera.tsv',
    '{data_dir}/004_genera_of_interest'
  output:
    expand('{{data_dir}}/005_{set_name}.fna', set_name=['train', 'test', 'other'])
  params:
    script_dir=SCRIPT_DIR,
  shell:
    '''
    {params.script_dir}/005_split_train_test_other.py -f {input[0]}           \
                                                      -g {input[1]}           \
                                                      -l {input[2]}
    '''

rule split_fasta:
  input:
    '{data_dir}/005_{set_name}.fna'
  output:
    '{data_dir}/006_split_{set_name}_completed'
  params:
    script_dir=SCRIPT_DIR,
    split_dir='{data_dir}/006_split_{set_name}'
  shell:
    '''
    mkdir -p {params.split_dir}

    {params.script_dir}/006_split_fasta.py -i {input[0]} -o {params.split_dir}

    touch {output[0]}
    '''

rule annotate:
  input:
    '{data_dir}/006_split_{set_name}_completed'
  output:
    '{data_dir}/007_{set_name}_genes.faa'
  params:
    prokka_dir='{data_dir}/007_prokka',
    split_dir='{data_dir}/006_split_{set_name}'
  shell:
    '''
    mkdir -p {params.prokka_dir}

    for FILE in $(ls {params.split_dir}); do

        NAME=${{FILE%%.*}}

        prokka --force                                                         \
               --kingdom Viruses                                               \
               --outdir {params.prokka_dir}                                    \
               --prefix ${{NAME}}                                              \
               --noanno                                                        \
               --locustag ${{NAME}}                                            \
               {params.split_dir}/${{FILE}}
    done;

    cat {params.prokka_dir}/*.faa > {output[0]}
    '''

rule cd_hit:
  input:
    '{data_dir}/007_{set_name}_genes.faa'
  output:
    '{data_dir}/008_{set_name}.cd-hit.genes.faa',
    '{data_dir}/008_{set_name}.cd-hit.genes.faa.clstr'
  threads:
    THREADS
  shell:
    '''
    cd-hit -c 1 -s 1 -g 1 -d 0 -T {threads} -i {input[0]} -o {output[0]}
    '''

rule crocoblast:
  input:
    '{data_dir}/008_train.cd-hit.genes.faa'
  output:
    '{data_dir}/009_crocoblast.abc'
  params:
    script_dir=SCRIPT_DIR,
    croco_dir='{data_dir}/009_crocoblast',
    croco_db_dir='{data_dir}/009_crocoblast_database',
    db_name='008_train.cd-hit.genes.faa'
  threads:
    THREADS
  shell:
    '''
    rm -rf {params.croco_dir} {params.croco_db_dir}
    cp -r  {params.script_dir}/crocoblast {params.croco_dir}
    mkdir  {params.croco_db_dir}

    {params.croco_dir}/crocoblast  -add_database                       \
                                     --sequence_file                   \
                                       protein                         \
                                       {input[0]}                      \
                                       {params.db_name}                \
                                       {params.croco_db_dir}

    {params.croco_dir}/crocoblast  -add_to_queue                       \
                                     blastp                            \
                                     {params.db_name}                  \
                                     {input[0]}                        \
                                     {wildcards.data_dir}              \
                                     --blast_options                   \
                                       -outfmt 6                       \
                                       -max_target_seqs 1000000        \
                                       -max_hsps 1

    echo "{params.croco_dir}/crocoblast -run > /dev/null; \
          touch {wildcards.data_dir}/009_finished"        \
    | qsub -l thr={threads} -cwd -N crocoblast

    while [ ! -f {wildcards.data_dir}/009_finished ]; do
        sleep 20m
    done

    mv {wildcards.data_dir}/CrocoBLAST_1 {wildcards.data_dir}/009_crocoblast_output
    cut -f 1,2,11 {wildcards.data_dir}/009_crocoblast_output/complete_assembled_output > {output[0]}
    '''

rule blast_to_needle:
  input:
    '{data_dir}/009_crocoblast.abc',
    '{data_dir}/007_train_genes.faa'
  output:
    '{data_dir}/009_crocoblast.needle.abc'
  params:
    script_dir=SCRIPT_DIR,
    data_dir=DATA_DIR
  shell:
    '''
    NEEDLE_DIR={params.data_dir}/009_needle

    rm -rf ${{NEEDLE_DIR}}
    mkdir  ${{NEEDLE_DIR}}

    {params.script_dir}/007_parallelize_global_alignment_from_blast.py  {input[0]}                \
                                                                        {input[1]}                \
                                                                        ${{NEEDLE_DIR}}

    while [ ! -f ${{NEEDLE_DIR}}/qsub_completed ]; do
        sleep 20m
    done;

    for i in $(seq 0 1 9); do
        cat ${{NEEDLE_DIR}}/tmp/${{i}}*.abc > ${{NEEDLE_DIR}}/tmp/${{i}}.final.abc        \
            && echo "${{NEEDLE_DIR}}/tmp/${{i}}.final.abc created."                           \
            || echo "There are no files to merge into ${{i}}.final.abc."
    done;

    cat ${{NEEDLE_DIR}}/tmp/*.final.abc > {output[0]}
    '''

rule cluster_spectral:
  input:
    '{data_dir}/009_crocoblast.abc'
  output:
    '{data_dir}/010_spectral.clusters'
  shell:
    '''
    clusterx -t blast {input[0]} -o {output[0]}
    '''

rule cluster_mcl:
  input:
    '{data_dir}/009_crocoblast.abc'
  output:
    '{data_dir}/010_mcl.clusters'
  shell:
    '''
    clusterx -m mcl -p inflation=1.2 {input[0]} -o {output[0]}
    '''

rule cluster_needle_mcl:
  input:
    '{data_dir}/009_crocoblast.needle.abc'
  output:
    '{data_dir}/010_needle_mcl.clusters'
  shell:
    '''
    clusterx -m mcl -p inflation=1.2,dont_transform=True {input[0]} -o {output[0]}
    '''

rule create_cluster_file:
  input:
    '{data_dir}/010_{cluster_method}.clusters',
    '{data_dir}/008_train.cd-hit.genes.faa.clstr'
  output:
    '{data_dir}/011_{cluster_method}.tsv'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/010_create_cluster_file.py {input[0]} {input[1]} {output[0]}
    '''

# checkpoint
rule create_matrix:
  input:
    '{data_dir}/010_{cluster_method}.tsv',
    '{data_dir}/006_train.genes.conversion',
    '{data_dir}/006_train.genomes.fasta'
  output:
    '{data_dir}/011_matrix.{cluster_method}.raw.tsv'
  params:
    script_dir=SCRIPT_DIR,
    genomes_list='{data_dir}/011_train.genomes.list'
  shadow:
    'shallow'
  shell:
    '''
    grep "^>" {input[2]} | tr -d ">" | sort > {params.genomes_list}

    {params.script_dir}/009_parallelize_matrix_creation_from_mcl.py {input[1]}                    \
                                                                    {input[0]}                    \
                                                                    {params.genomes_list}

    while [ $(ls {wildcards.data_dir}/matrix.part* | wc -l) -ne 11 ]; do
        sleep 1m
    done

    sleep 1m
    cat {wildcards.data_dir}/matrix.part* > {output[0]}
    rm {wildcards.data_dir}/matrix.part*
    '''

rule annotate_cluster:
  input:
    '{data_dir}/005_annotated.genes.fasta',
    '{data_dir}/010_{cluster_method}.tsv',
  output:
    '{data_dir}/011_{cluster_method}_cluster_annotations/Cluster_{i}.result'
  params:
    script_dir=SCRIPT_DIR,
    cluster_annotation_dir='{data_dir}/011_{cluster_method}_cluster_annotations'
  shell:
    '''
    mkdir -p {params.cluster_annotation_dir}

    {params.script_dir}/011_prepare_cluster_for_interpro.py {input[0]}                            \
                                                            {input[1]}                            \
                                                            {wildcards.i}                         \
                                                            > {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta

    cd-hit  -i {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta                  \
            -o {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit           \
            -c 1 -d 0
            # -T 16

    interproscan  -i {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit     \
                  -o {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit.tsv \
                  -f tsv -goterms
                  # -cpu 16

    cut -f 12,13 {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit.tsv     \
        | sort | uniq -c | sort -nr                                                               \
        > {params.cluster_annotation_dir}/Cluster_{wildcards.i}.result
    '''

rule select_features:
  input:
    '{data_dir}/011_matrix.{cluster_method}.raw.tsv'
  output:
    '{data_dir}/011_matrix.{cluster_method}.fs.tsv'
  params:
    script_dir=SCRIPT_DIR,
    variance_threshold=VARIANCE_THRESHOLD
  shell:
    '''
    {params.script_dir}/011_feature_selection.py {input[0]} {output[0]} {params.variance_threshold}
    '''

rule split_matrix:
  input:
    '{data_dir}/011_matrix.{cluster_method}.{type}.tsv',
    '{data_dir}/004_hosts'
  output:
    expand([
            '{{data_dir}}/012_matrix.{{cluster_method}}.{{type}}.{host}.tsv',
            '{{data_dir}}/012_hosts.{{cluster_method}}.{{type}}.{host}'
            ], host=HOSTS.split(',')),
  params:
    script_dir=SCRIPT_DIR,
    hosts=HOSTS
  shell:
    '''
    {params.script_dir}/012_split_matrix.py {input[0]} {input[1]} {params.hosts}
    '''

rule create_model:
  input:
    expand('{{data_dir}}/012_matrix.{{cluster_method}}.{{type}}.{host}.tsv', host=HOSTS.split(',')),
  output:
    '{data_dir}/013_model.{cluster_method}.{type}.{spec}.pkl',
    '{data_dir}/013_tree.{cluster_method}.{type}.{spec}.pdf'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/013_decision_tree.py {wildcards.spec} {input}
    '''

rule split_test_fasta:
  input:
    '{data_dir}/006_test.genomes.fasta'
  output:
    '{data_dir}/014_classification/{phage}.genomes.fasta'
  params:
    classify_dir='{data_dir}/014_classification',
  shell:
    '''
    mkdir -p {params.classify_dir}

    grep -A 1 {wildcards.phage} {input[0]} > {output[0]}
    '''

rule get_genes:
  input:
    '{data_dir}/014_classification/{phage}.genomes.fasta'
  output:
    '{data_dir}/014_classification/{phage}.genes.fasta'
  params:
    script_dir=SCRIPT_DIR,
    classify_dir='{data_dir}/014_classification',
    prefix='{data_dir}/014_classification/{phage}'
  shell:
    '''
    prokka  --force                                                                               \
            --kingdom Viruses                                                                     \
            --outdir {params.classify_dir}                                                        \
            --prefix {wildcards.phage}                                                            \
            {input[0]}

    {params.script_dir}/006_extract_prokka_genes.py {params.classify_dir}/{wildcards.phage}.gbk   \
                                                    {params.prefix}
    '''

rule blast_genes:
  input:
    '{data_dir}/014_classification/{phage}.genes.fasta',
  output:
    '{data_dir}/014_classification/{phage}.genes.blast',
  params:
    database='{data_dir}/008_crocoblast_database/007_train.cd-hit.genes.fasta',
  shell:
    '''
    blastp  -query {input[0]}                                                                     \
            -db {params.database}                                                                 \
            -out {output[0]}                                                                      \
            -outfmt "6 qseqid sseqid score pident evalue"                                         \
            -max_target_seqs 1
    '''

rule classify:
  input:
    '{data_dir}/014_classification/{phage}.genes.blast',
    '{data_dir}/010_{cluster_method}.tsv',
    '{data_dir}/011_matrix.{cluster_method}.{type}.tsv',
    '{data_dir}/013_model.{cluster_method}.{type}.{spec}.pkl',
  output:
    '{data_dir}/014_classification/{phage}.{cluster_method}.{type}.{spec}.vector',
    '{data_dir}/014_classification/{phage}.{cluster_method}.{type}.{spec}.result',
  params:
    script_dir=SCRIPT_DIR,
  shell:
    '''
    {params.script_dir}/014_create_vector.py  {input[0]} {input[1]} {input[2]} {input[3]}         \
                                              {output[0]} {output[1]}
    '''

rule stats:
  input:
    results=expand('{{data_dir}}/014_classification/{phage}.{{cluster_method}}.{{type}}.{{spec}}.result',
                    phage=PHAGES.split(',')),
    hosts='{data_dir}/004_hosts'
  output:
    '{data_dir}/015_{cluster_method}.{type}.{spec}.results',
    '{data_dir}/015_{cluster_method}.{type}.{spec}.stats'
  params:
    script_dir=SCRIPT_DIR,
  shell:
    '''
    cat {input.results} > {output[0]}

    {params.script_dir}/015_calculate_stats.py {input.hosts} {output[0]} {output[1]}
    '''
